// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/notification.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Notificationservice_Sendnotification_FullMethodName                          = "/notificitationservice.notificationservice/sendnotification"
	Notificationservice_Sendbatchnotification_FullMethodName                     = "/notificitationservice.notificationservice/sendbatchnotification"
	Notificationservice_Healthcheck_FullMethodName                               = "/notificitationservice.notificationservice/healthcheck"
	Notificationservice_Sendnotiificationacceptingdisasterapidata_FullMethodName = "/notificitationservice.notificationservice/sendnotiificationacceptingdisasterapidata"
)

// NotificationserviceClient is the client API for Notificationservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationserviceClient interface {
	// sending single notifictioon
	// note : unary service
	Sendnotification(ctx context.Context, in *Notificationrequest, opts ...grpc.CallOption) (*Notificationresponse, error)
	// send stream of notifications
	Sendbatchnotification(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Notificationrequest, Batchnotificationresponse], error)
	// health check // todo:
	Healthcheck(ctx context.Context, in *Healthcheckrequest, opts ...grpc.CallOption) (*Healthcheckresponse, error)
	// disaster api sends the request
	// along with the data required for sending notiifications
	// this way i can send and req and reciecve response and also send the  required data
	Sendnotiificationacceptingdisasterapidata(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Notificationrequestwithdata, Batchnotificationresponse], error)
}

type notificationserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationserviceClient(cc grpc.ClientConnInterface) NotificationserviceClient {
	return &notificationserviceClient{cc}
}

func (c *notificationserviceClient) Sendnotification(ctx context.Context, in *Notificationrequest, opts ...grpc.CallOption) (*Notificationresponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Notificationresponse)
	err := c.cc.Invoke(ctx, Notificationservice_Sendnotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationserviceClient) Sendbatchnotification(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Notificationrequest, Batchnotificationresponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Notificationservice_ServiceDesc.Streams[0], Notificationservice_Sendbatchnotification_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Notificationrequest, Batchnotificationresponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Notificationservice_SendbatchnotificationClient = grpc.ClientStreamingClient[Notificationrequest, Batchnotificationresponse]

func (c *notificationserviceClient) Healthcheck(ctx context.Context, in *Healthcheckrequest, opts ...grpc.CallOption) (*Healthcheckresponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Healthcheckresponse)
	err := c.cc.Invoke(ctx, Notificationservice_Healthcheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationserviceClient) Sendnotiificationacceptingdisasterapidata(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Notificationrequestwithdata, Batchnotificationresponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Notificationservice_ServiceDesc.Streams[1], Notificationservice_Sendnotiificationacceptingdisasterapidata_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Notificationrequestwithdata, Batchnotificationresponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Notificationservice_SendnotiificationacceptingdisasterapidataClient = grpc.ClientStreamingClient[Notificationrequestwithdata, Batchnotificationresponse]

// NotificationserviceServer is the server API for Notificationservice service.
// All implementations must embed UnimplementedNotificationserviceServer
// for forward compatibility.
type NotificationserviceServer interface {
	// sending single notifictioon
	// note : unary service
	Sendnotification(context.Context, *Notificationrequest) (*Notificationresponse, error)
	// send stream of notifications
	Sendbatchnotification(grpc.ClientStreamingServer[Notificationrequest, Batchnotificationresponse]) error
	// health check // todo:
	Healthcheck(context.Context, *Healthcheckrequest) (*Healthcheckresponse, error)
	// disaster api sends the request
	// along with the data required for sending notiifications
	// this way i can send and req and reciecve response and also send the  required data
	Sendnotiificationacceptingdisasterapidata(grpc.ClientStreamingServer[Notificationrequestwithdata, Batchnotificationresponse]) error
	mustEmbedUnimplementedNotificationserviceServer()
}

// UnimplementedNotificationserviceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationserviceServer struct{}

func (UnimplementedNotificationserviceServer) Sendnotification(context.Context, *Notificationrequest) (*Notificationresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sendnotification not implemented")
}
func (UnimplementedNotificationserviceServer) Sendbatchnotification(grpc.ClientStreamingServer[Notificationrequest, Batchnotificationresponse]) error {
	return status.Errorf(codes.Unimplemented, "method Sendbatchnotification not implemented")
}
func (UnimplementedNotificationserviceServer) Healthcheck(context.Context, *Healthcheckrequest) (*Healthcheckresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthcheck not implemented")
}
func (UnimplementedNotificationserviceServer) Sendnotiificationacceptingdisasterapidata(grpc.ClientStreamingServer[Notificationrequestwithdata, Batchnotificationresponse]) error {
	return status.Errorf(codes.Unimplemented, "method Sendnotiificationacceptingdisasterapidata not implemented")
}
func (UnimplementedNotificationserviceServer) mustEmbedUnimplementedNotificationserviceServer() {}
func (UnimplementedNotificationserviceServer) testEmbeddedByValue()                             {}

// UnsafeNotificationserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationserviceServer will
// result in compilation errors.
type UnsafeNotificationserviceServer interface {
	mustEmbedUnimplementedNotificationserviceServer()
}

func RegisterNotificationserviceServer(s grpc.ServiceRegistrar, srv NotificationserviceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationserviceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Notificationservice_ServiceDesc, srv)
}

func _Notificationservice_Sendnotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notificationrequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationserviceServer).Sendnotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notificationservice_Sendnotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationserviceServer).Sendnotification(ctx, req.(*Notificationrequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notificationservice_Sendbatchnotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotificationserviceServer).Sendbatchnotification(&grpc.GenericServerStream[Notificationrequest, Batchnotificationresponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Notificationservice_SendbatchnotificationServer = grpc.ClientStreamingServer[Notificationrequest, Batchnotificationresponse]

func _Notificationservice_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Healthcheckrequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationserviceServer).Healthcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notificationservice_Healthcheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationserviceServer).Healthcheck(ctx, req.(*Healthcheckrequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notificationservice_Sendnotiificationacceptingdisasterapidata_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotificationserviceServer).Sendnotiificationacceptingdisasterapidata(&grpc.GenericServerStream[Notificationrequestwithdata, Batchnotificationresponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Notificationservice_SendnotiificationacceptingdisasterapidataServer = grpc.ClientStreamingServer[Notificationrequestwithdata, Batchnotificationresponse]

// Notificationservice_ServiceDesc is the grpc.ServiceDesc for Notificationservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notificationservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notificitationservice.notificationservice",
	HandlerType: (*NotificationserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendnotification",
			Handler:    _Notificationservice_Sendnotification_Handler,
		},
		{
			MethodName: "healthcheck",
			Handler:    _Notificationservice_Healthcheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendbatchnotification",
			Handler:       _Notificationservice_Sendbatchnotification_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "sendnotiificationacceptingdisasterapidata",
			Handler:       _Notificationservice_Sendnotiificationacceptingdisasterapidata_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/notification.proto",
}
