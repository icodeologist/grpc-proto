// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: notification.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationService_SendNotification_FullMethodName                          = "/notificitationService.NotificationService/SendNotification"
	NotificationService_SendBatchNotification_FullMethodName                     = "/notificitationService.NotificationService/SendBatchNotification"
	NotificationService_HealthCheck_FullMethodName                               = "/notificitationService.NotificationService/HealthCheck"
	NotificationService_SendNotiificationAcceptingDisasterAPIdata_FullMethodName = "/notificitationService.NotificationService/SendNotiificationAcceptingDisasterAPIdata"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	// sending single notifictioon
	// NOTE : unary service
	SendNotification(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error)
	// send stream of notifications
	SendBatchNotification(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NotificationRequest, BatchNotificationResponse], error)
	// Health check // TODO:
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// disaster api sends the request
	// along with the data required for sending notiifications
	// this way i can send and req and reciecve response and also send the  required data
	SendNotiificationAcceptingDisasterAPIdata(ctx context.Context, in *NotificationRequestWithData, opts ...grpc.CallOption) (*BatchNotificationResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SendNotification(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendBatchNotification(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NotificationRequest, BatchNotificationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[0], NotificationService_SendBatchNotification_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NotificationRequest, BatchNotificationResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_SendBatchNotificationClient = grpc.ClientStreamingClient[NotificationRequest, BatchNotificationResponse]

func (c *notificationServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, NotificationService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendNotiificationAcceptingDisasterAPIdata(ctx context.Context, in *NotificationRequestWithData, opts ...grpc.CallOption) (*BatchNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendNotiificationAcceptingDisasterAPIdata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility.
type NotificationServiceServer interface {
	// sending single notifictioon
	// NOTE : unary service
	SendNotification(context.Context, *NotificationRequest) (*NotificationResponse, error)
	// send stream of notifications
	SendBatchNotification(grpc.ClientStreamingServer[NotificationRequest, BatchNotificationResponse]) error
	// Health check // TODO:
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// disaster api sends the request
	// along with the data required for sending notiifications
	// this way i can send and req and reciecve response and also send the  required data
	SendNotiificationAcceptingDisasterAPIdata(context.Context, *NotificationRequestWithData) (*BatchNotificationResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceServer struct{}

func (UnimplementedNotificationServiceServer) SendNotification(context.Context, *NotificationRequest) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedNotificationServiceServer) SendBatchNotification(grpc.ClientStreamingServer[NotificationRequest, BatchNotificationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendBatchNotification not implemented")
}
func (UnimplementedNotificationServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedNotificationServiceServer) SendNotiificationAcceptingDisasterAPIdata(context.Context, *NotificationRequestWithData) (*BatchNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotiificationAcceptingDisasterAPIdata not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}
func (UnimplementedNotificationServiceServer) testEmbeddedByValue()                             {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotification(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendBatchNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotificationServiceServer).SendBatchNotification(&grpc.GenericServerStream[NotificationRequest, BatchNotificationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationService_SendBatchNotificationServer = grpc.ClientStreamingServer[NotificationRequest, BatchNotificationResponse]

func _NotificationService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendNotiificationAcceptingDisasterAPIdata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequestWithData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotiificationAcceptingDisasterAPIdata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendNotiificationAcceptingDisasterAPIdata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotiificationAcceptingDisasterAPIdata(ctx, req.(*NotificationRequestWithData))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notificitationService.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotification",
			Handler:    _NotificationService_SendNotification_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _NotificationService_HealthCheck_Handler,
		},
		{
			MethodName: "SendNotiificationAcceptingDisasterAPIdata",
			Handler:    _NotificationService_SendNotiificationAcceptingDisasterAPIdata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendBatchNotification",
			Handler:       _NotificationService_SendBatchNotification_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "notification.proto",
}
